/* generated by rust_qt_binding_generator */
#include "Bindings.h"

namespace {

    struct option_quintptr {
    public:
        quintptr value;
        bool some;
        operator QVariant() const {
            if (some) {
                return QVariant::fromValue(value);
            }
            return QVariant();
        }
    };
    static_assert(std::is_pod<option_quintptr>::value, "option_quintptr must be a POD type.");

    typedef void (*qstring_set)(QString* val, const char* utf8, int nbytes);
    void set_qstring(QString* val, const char* utf8, int nbytes) {
        *val = QString::fromUtf8(utf8, nbytes);
    }

    struct qmodelindex_t {
        int row;
        quintptr id;
    };
    inline QVariant cleanNullQVariant(const QVariant& v) {
        return (v.isNull()) ?QVariant() :v;
    }
}
extern "C" {
    Application::Private* application_new(Application*, Channels*,
        void (*)(const Channels*),
        void (*)(Channels*, quintptr, quintptr),
        void (*)(Channels*),
        void (*)(Channels*),
        void (*)(Channels*, int, int),
        void (*)(Channels*),
        void (*)(Channels*, int, int),
        void (*)(Channels*));
    void application_free(Application::Private*);
    Channels::Private* application_channels_get(const Application::Private*);
};

extern "C" {
    void channels_data_name(const Channels::Private*, int, QString*, qstring_set);
    void channels_sort(Channels::Private*, unsigned char column, Qt::SortOrder order = Qt::AscendingOrder);

    int channels_row_count(const Channels::Private*);
    bool channels_insert_rows(Channels::Private*, int, int);
    bool channels_remove_rows(Channels::Private*, int, int);
    bool channels_can_fetch_more(const Channels::Private*);
    void channels_fetch_more(Channels::Private*);
}
int Channels::columnCount(const QModelIndex &parent) const
{
    return (parent.isValid()) ? 0 : 1;
}

bool Channels::hasChildren(const QModelIndex &parent) const
{
    return rowCount(parent) > 0;
}

int Channels::rowCount(const QModelIndex &parent) const
{
    return (parent.isValid()) ? 0 : channels_row_count(m_d);
}

bool Channels::insertRows(int row, int count, const QModelIndex &)
{
    return channels_insert_rows(m_d, row, count);
}

bool Channels::removeRows(int row, int count, const QModelIndex &)
{
    return channels_remove_rows(m_d, row, count);
}

QModelIndex Channels::index(int row, int column, const QModelIndex &parent) const
{
    if (!parent.isValid() && row >= 0 && row < rowCount(parent) && column >= 0 && column < 1) {
        return createIndex(row, column, (quintptr)row);
    }
    return QModelIndex();
}

QModelIndex Channels::parent(const QModelIndex &) const
{
    return QModelIndex();
}

bool Channels::canFetchMore(const QModelIndex &parent) const
{
    return (parent.isValid()) ? 0 : channels_can_fetch_more(m_d);
}

void Channels::fetchMore(const QModelIndex &parent)
{
    if (!parent.isValid()) {
        channels_fetch_more(m_d);
    }
}

void Channels::sort(int column, Qt::SortOrder order)
{
    channels_sort(m_d, column, order);
}
Qt::ItemFlags Channels::flags(const QModelIndex &i) const
{
    auto flags = QAbstractItemModel::flags(i);
    return flags;
}

QString Channels::name(int row) const
{
    QString s;
    channels_data_name(m_d, row, &s, set_qstring);
    return s;
}

QVariant Channels::data(const QModelIndex &index, int role) const
{
    Q_ASSERT(rowCount(index.parent()) > index.row());
    switch (index.column()) {
    case 0:
        switch (role) {
        case Qt::UserRole + 0:
            return QVariant::fromValue(name(index.row()));
        }
    }
    return QVariant();
}

int Channels::role(const char* name) const {
    auto names = roleNames();
    auto i = names.constBegin();
    while (i != names.constEnd()) {
        if (i.value() == name) {
            return i.key();
        }
        ++i;
    }
    return -1;
}
QHash<int, QByteArray> Channels::roleNames() const {
    QHash<int, QByteArray> names = QAbstractItemModel::roleNames();
    names.insert(Qt::UserRole + 0, "name");
    return names;
}
QVariant Channels::headerData(int section, Qt::Orientation orientation, int role) const
{
    if (orientation != Qt::Horizontal) {
        return QVariant();
    }
    return m_headerData.value(qMakePair(section, (Qt::ItemDataRole)role), role == Qt::DisplayRole ?QString::number(section + 1) :QVariant());
}

bool Channels::setHeaderData(int section, Qt::Orientation orientation, const QVariant &value, int role)
{
    if (orientation != Qt::Horizontal) {
        return false;
    }
    m_headerData.insert(qMakePair(section, (Qt::ItemDataRole)role), value);
    return true;
}

extern "C" {
    Channels::Private* channels_new(Channels*,
        void (*)(const Channels*),
        void (*)(Channels*, quintptr, quintptr),
        void (*)(Channels*),
        void (*)(Channels*),
        void (*)(Channels*, int, int),
        void (*)(Channels*),
        void (*)(Channels*, int, int),
        void (*)(Channels*));
    void channels_free(Channels::Private*);
};

Application::Application(bool /*owned*/, QObject *parent):
    QObject(parent),
    m_channels(new Channels(false, this)),
    m_d(0),
    m_ownsPrivate(false)
{
}

Application::Application(QObject *parent):
    QObject(parent),
    m_channels(new Channels(false, this)),
    m_d(application_new(this, m_channels,
        [](const Channels* o) {
            emit o->newDataReady(QModelIndex());
        },
        [](Channels* o, quintptr first, quintptr last) {
            o->dataChanged(o->createIndex(first, 0, first),
                       o->createIndex(last, 0, last));
        },
        [](Channels* o) {
            o->beginResetModel();
        },
        [](Channels* o) {
            o->endResetModel();
        },
        [](Channels* o, int first, int last) {
            o->beginInsertRows(QModelIndex(), first, last);
        },
        [](Channels* o) {
            o->endInsertRows();
        },
        [](Channels* o, int first, int last) {
            o->beginRemoveRows(QModelIndex(), first, last);
        },
        [](Channels* o) {
            o->endRemoveRows();
        }
)),
    m_ownsPrivate(true)
{
    m_channels->m_d = application_channels_get(m_d);
    connect(this->m_channels, &Channels::newDataReady, this->m_channels, [this](const QModelIndex& i) {
        this->m_channels->fetchMore(i);
    }, Qt::QueuedConnection);
}

Application::~Application() {
    if (m_ownsPrivate) {
        application_free(m_d);
    }
}
const Channels* Application::channels() const
{
    return m_channels;
}
Channels* Application::channels()
{
    return m_channels;
}
Channels::Channels(bool /*owned*/, QObject *parent):
    QAbstractItemModel(parent),
    m_d(0),
    m_ownsPrivate(false)
{
    initHeaderData();
}

Channels::Channels(QObject *parent):
    QAbstractItemModel(parent),
    m_d(channels_new(this,
        [](const Channels* o) {
            emit o->newDataReady(QModelIndex());
        },
        [](Channels* o, quintptr first, quintptr last) {
            o->dataChanged(o->createIndex(first, 0, first),
                       o->createIndex(last, 0, last));
        },
        [](Channels* o) {
            o->beginResetModel();
        },
        [](Channels* o) {
            o->endResetModel();
        },
        [](Channels* o, int first, int last) {
            o->beginInsertRows(QModelIndex(), first, last);
        },
        [](Channels* o) {
            o->endInsertRows();
        },
        [](Channels* o, int first, int last) {
            o->beginRemoveRows(QModelIndex(), first, last);
        },
        [](Channels* o) {
            o->endRemoveRows();
        }
)),
    m_ownsPrivate(true)
{
    connect(this, &Channels::newDataReady, this, [this](const QModelIndex& i) {
        this->fetchMore(i);
    }, Qt::QueuedConnection);
    initHeaderData();
}

Channels::~Channels() {
    if (m_ownsPrivate) {
        channels_free(m_d);
    }
}
void Channels::initHeaderData() {
}
